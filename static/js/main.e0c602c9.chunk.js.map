{"version":3,"sources":["index.js"],"names":["Square","this","props","board","index","className","onClick","width","height","cx","cy","r","fill","validMovesIndices","includes","React","Component","Board","createBoard","i","children","j","push","renderSquare","Game","state","history","createStartBoard","turn","blackScore","whiteScore","winner","tie","gameOver","singlePlayer","playerColor","machineColor","length","setTimeout","machineMove","validMovesList","validMoves","move","Math","floor","random","handleClick","setState","document","getElementById","disabled","addEventListener","twoPlayerMode","singlePlayerMode","x","y","slice","isValidMove","makeMove","opponent","newTurn","countScore","concat","turnColor","winnerText","id","map","bind","restart","moveBack","Array","isValid","delta","xDelta","yDelta","m","nextSquareIndex","squaresToChangeIndices","player","total","ReactDOM","render"],"mappings":"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","file":"static/js/main.e0c602c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import { board1 } from './testCases';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        if (this.props.board[this.props.index] === 'W') {\r\n            return (\r\n                <button className=\"square\" onClick={this.props.onClick}>\r\n                    <svg width=\"40\" height=\"40\">\r\n                        <circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"white\" />\r\n                    </svg>\r\n                </button>\r\n            );\r\n        } else if (this.props.board[this.props.index] === 'B') {\r\n            return (\r\n                <button className=\"square\" onClick={this.props.onClick}>\r\n                    <svg width=\"40\" height=\"40\">\r\n                        <circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"black\" />\r\n                    </svg>\r\n                </button>\r\n            );\r\n        } else if (this.props.validMovesIndices.includes(this.props.index)) {\r\n            return (\r\n                <button className=\"square\" onClick={this.props.onClick}>\r\n                    <svg width=\"20\" height=\"20\">\r\n                        <circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"#ee6941\" />\r\n                    </svg>\r\n                </button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button className=\"square\" onClick={this.props.onClick}>\r\n\r\n                </button>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i, j) {\r\n        return <Square\r\n            validMovesIndices={this.props.validMovesIndices}\r\n            onClick={() => this.props.onClick(j, i)}\r\n            board={this.props.board}\r\n            index={8 * i + j}\r\n            key={8 * i + j}\r\n        />;\r\n    }\r\n\r\n    createBoard = () => {\r\n        let board = [];\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            let children = [];\r\n            for (let j = 0; j < 8; j++) {\r\n                children.push(this.renderSquare(i, j));\r\n            }\r\n            board.push(<div className=\"board-row\" key={i}>{children}</div>);\r\n        }\r\n        return board;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                {this.createBoard()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                board: createStartBoard(),\r\n                turn: 'B',\r\n                blackScore: 2,\r\n                whiteScore: 2,\r\n                winner: null,\r\n                tie: null,\r\n                gameOver: false,\r\n            }],\r\n            singlePlayer: false,\r\n            playerColor: null, //Relevant only if we are in single player mode\r\n            machineColor: null, // Relevant only if we are in single player mode \r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.singlePlayer && this.state.history[this.state.history.length - 1].turn === this.state.machineColor) {\r\n            setTimeout(() => {\r\n                this.machineMove();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    machineMove() {\r\n        if (this.state.history[this.state.history.length - 1].turn === this.state.machineColor && this.state.history[this.state.history.length - 1].winner === null && this.state.history[this.state.history.length - 1].tie === null) {\r\n            let validMovesList = validMoves(this.state.history[this.state.history.length - 1].board, this.state.history[this.state.history.length - 1].turn);\r\n            let move = validMovesList[Math.floor(Math.random() * validMovesList.length)];\r\n            this.handleClick(move[0], move[1], true);\r\n        }\r\n    }\r\n\r\n    singlePlayerMode() {\r\n        this.setState({\r\n            history: [{\r\n                board: createStartBoard(),\r\n                turn: 'B',\r\n                blackScore: 2,\r\n                whiteScore: 2,\r\n                winner: null,\r\n                tie: null,\r\n                gameOver: false,\r\n            }],\r\n            singlePlayer: true,\r\n            playerColor: 'B',\r\n            machineColor: 'W'\r\n        });\r\n        document.getElementById(\"one-player\").disabled = true;\r\n        document.getElementById(\"two-players\").disabled = false;\r\n        document.getElementById(\"two-players\").addEventListener('click', () => {\r\n            this.twoPlayerMode();\r\n        });\r\n    }\r\n\r\n    twoPlayerMode() {\r\n        this.setState({\r\n            history: [{\r\n                board: createStartBoard(),\r\n                turn: 'B',\r\n                blackScore: 2,\r\n                whiteScore: 2,\r\n                winner: null,\r\n                tie: null,\r\n                gameOver: false,\r\n            }],\r\n            singlePlayer: false,\r\n            playerColor: null,\r\n            machineColor: null\r\n        });\r\n        document.getElementById(\"one-player\").disabled = false;\r\n        document.getElementById(\"two-players\").disabled = true;\r\n    }\r\n\r\n    restart() {\r\n        if (this.state.singlePlayer) {\r\n            this.singlePlayerMode();\r\n        } else {\r\n            this.twoPlayerMode();\r\n        }\r\n    }\r\n\r\n    handleClick(x, y, machineMove=false) {\r\n        if (!machineMove && this.state.history[this.state.history.length - 1].turn === this.state.machineColor) {\r\n            return;\r\n        } \r\n\r\n        let board = this.state.history[this.state.history.length - 1].board.slice();\r\n\r\n        if (isValidMove(board, this.state.history[this.state.history.length - 1].turn, [x, y])) {\r\n            makeMove(board, this.state.history[this.state.history.length - 1].turn, [x, y]);\r\n\r\n            let opponent = this.state.history[this.state.history.length - 1].turn === 'B' ? 'W' : 'B';\r\n            let newTurn = this.state.history[this.state.history.length - 1].turn;\r\n            //If the opponent has no available moves, the turn remains with the current player\r\n            if (validMoves(board, opponent).length > 0) {\r\n                newTurn = opponent;\r\n            }\r\n\r\n            let blackScore = countScore(board, 'B');\r\n            let whiteScore = countScore(board, 'W');\r\n\r\n            let winner = null;\r\n            let tie = null;\r\n            let gameOver = false;\r\n            if (validMoves(board, opponent).length === 0 && validMoves(board, this.state.history[this.state.history.length - 1].turn).length === 0) {\r\n                gameOver = true;\r\n                if (countScore(board, this.state.history[this.state.history.length - 1].turn) === countScore(board, opponent)) {\r\n                    tie = true;\r\n                    winner = null;\r\n                } else {\r\n                    tie = false;\r\n                    winner = countScore(board, this.state.history[this.state.history.length - 1].turn) > countScore(board, opponent) ? this.state.history[this.state.history.length - 1].turn : opponent;\r\n                }\r\n            }\r\n\r\n            this.setState({ history: this.state.history.concat({ board: board, turn: newTurn, blackScore: blackScore, whiteScore: whiteScore, winner: winner, tie: tie, gameOver: gameOver }) });\r\n        }\r\n    }\r\n\r\n    moveBack() {\r\n        if (this.state.history.length > 1 && !this.state.singlePlayer) {\r\n            this.setState({ history: this.state.history.slice(0, this.state.history.length - 1) })\r\n        } else if (this.state.history.length > 1 && this.state.singlePlayer) {\r\n            if (!this.state.history[this.state.history.length - 1].gameOver && this.state.history[this.state.history.length - 1].turn === this.state.playerColor) {\r\n                let i;\r\n                let j = 0;\r\n                for (i = this.state.history.length - 1; i >= 0; i--) {\r\n                    if (j === 2) {\r\n                        break;\r\n                    } else if (this.state.history[i].turn === this.state.playerColor) {\r\n                        j++;\r\n                    }\r\n                }\r\n                i++;\r\n                this.setState({ history: this.state.history.slice(0, i + 1) });\r\n            } else if (this.state.history[this.state.history.length - 1].gameOver) {\r\n                let i;\r\n                let j = 0;\r\n                for (i = this.state.history.length - 2; i >= 0; i--) {\r\n                    if (j === 1) {\r\n                        break;\r\n                    } else if (this.state.history[i].turn === this.state.playerColor) {\r\n                        j++;\r\n                    }\r\n                }\r\n                i++;\r\n                this.setState({ history: this.state.history.slice(0, i + 1) });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let turnColor = this.state.history[this.state.history.length - 1].turn === 'B' ? 'black' : 'white';\r\n        let winnerText = \"No winner yet\"\r\n        if (this.state.history[this.state.history.length - 1].winner !== null) {\r\n            winnerText = this.state.history[this.state.history.length - 1].winner === 'B' ? \"Black wins\" : \"White wins\";\r\n        } else if (this.state.history[this.state.history.length - 1].tie === true) {\r\n            winnerText = \"Tie In Game\"\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p id=\"status\">Turn\r\n                <svg width=\"40\" height=\"40\">\r\n                        <circle cx=\"20\" cy=\"20\" r=\"15\" fill={turnColor} />\r\n                    </svg>\r\n                </p>\r\n                <p id=\"winner-status\">{winnerText}</p>\r\n                <Board\r\n                    board={this.state.history[this.state.history.length - 1].board}\r\n                    onClick={(x, y) => this.handleClick(x, y)}\r\n                    validMovesIndices={validMoves(this.state.history[this.state.history.length - 1].board, this.state.history[this.state.history.length - 1].turn).map(([x, y]) => { return (8 * y + x); })}\r\n                />\r\n                <div className=\"select-mode\">\r\n                    <button id=\"one-player\" onClick={this.singlePlayerMode.bind(this)}>\r\n                        Single Player\r\n                    </button>\r\n                    <button id=\"two-players\" disabled>\r\n                        Two Players\r\n                    </button>\r\n                    <button id=\"restart\" onClick={this.restart.bind(this)}>\r\n                        Restart\r\n                    </button>\r\n                </div>\r\n                <div className=\"scores\">\r\n                    <div className=\"black-score\">\r\n                        <svg width=\"40\" height=\"40\">\r\n                            <circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"black\" />\r\n                        </svg>\r\n                        <p>{this.state.history[this.state.history.length - 1].blackScore}</p>\r\n                    </div>\r\n                    <div className=\"white-score\">\r\n                        <svg width=\"40\" height=\"40\">\r\n                            <circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"white\" />\r\n                        </svg>\r\n                        <p>{this.state.history[this.state.history.length - 1].whiteScore}</p>\r\n                    </div>\r\n                </div>\r\n                <button id=\"undo\" onClick={this.moveBack.bind(this)}>\r\n                    Undo\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction createStartBoard() {\r\n    let board = Array(64).fill(null);\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            if (i === 3 && j === 3) {\r\n                board[8 * i + j] = 'W';\r\n            }\r\n            else if (i === 3 && j === 4) {\r\n                board[8 * i + j] = 'B';\r\n            }\r\n            else if (i === 4 && j === 3) {\r\n                board[8 * i + j] = 'B';\r\n            }\r\n            else if (i === 4 && j === 4) {\r\n                board[8 * i + j] = 'W';\r\n            }\r\n        }\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nfunction isValidMove(board, turn, [x, y]) {\r\n    if (!(0 <= x <= 7) || !(0 <= y <= 7) || board[8 * y + x] !== null) {\r\n        return false;\r\n    }\r\n    //delta = (x, y); starting from the upper left corner\r\n    // right, left, up, down, right-up, left-down, left-up, right-down\r\n    let deltas = [[1, 0], [-1, 0], [0, -1], [0, 1], [1, -1], [-1, 1], [-1, -1], [1, 1]];\r\n    let isValid = false;\r\n    let opponent = turn === 'B' ? 'W' : 'B';\r\n\r\n    for (let delta of deltas) {\r\n        let xDelta = delta[0];\r\n        let yDelta = delta[1];\r\n\r\n        if ((0 <= (x + xDelta)) && ((x + xDelta) <= 7) && (0 <= (y + yDelta)) && ((y + yDelta) <= 7) && board[8 * (y + yDelta) + (x + xDelta)] === opponent) {\r\n            let m = 2;\r\n\r\n            while ((0 <= (x + xDelta * m)) && ((x + xDelta * m) <= 7) && (0 <= (y + yDelta * m)) && ((y + yDelta * m) <= 7)) {\r\n                let nextSquareIndex = 8 * (y + yDelta * m) + (x + xDelta * m);\r\n\r\n                if (board[nextSquareIndex] === opponent) {\r\n                    m++;\r\n                    continue;\r\n                }\r\n                else if (board[nextSquareIndex] === turn) {\r\n                    isValid = true;\r\n                    break;\r\n                }\r\n                else if (board[nextSquareIndex] === null) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isValid) {\r\n            return isValid;\r\n        }\r\n    }\r\n    return isValid;\r\n}\r\n\r\nfunction validMoves(board, turn) {\r\n    let validMovesList = [];\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            if (isValidMove(board, turn, [j, i])) {\r\n                validMovesList.push([j, i]);\r\n            }\r\n        }\r\n    }\r\n    return validMovesList;\r\n}\r\n\r\nfunction makeMove(board, turn, [x, y]) {\r\n    if (isValidMove(board, turn, [x, y])) {\r\n        let deltas = [[1, 0], [-1, 0], [0, -1], [0, 1], [1, -1], [-1, 1], [-1, -1], [1, 1]];\r\n        let opponent = turn === 'B' ? 'W' : 'B';\r\n\r\n        for (let delta of deltas) {\r\n            let xDelta = delta[0];\r\n            let yDelta = delta[1];\r\n            let squaresToChangeIndices = [];\r\n\r\n            if ((0 <= (x + xDelta)) && ((x + xDelta) <= 7) && (0 <= (y + yDelta)) && ((y + yDelta) <= 7) && board[8 * (y + yDelta) + (x + xDelta)] === opponent) {\r\n                squaresToChangeIndices.push(8 * (y + yDelta) + (x + xDelta));\r\n                let m = 2;\r\n\r\n                while ((0 <= (x + xDelta * m)) && ((x + xDelta * m) <= 7) && (0 <= (y + yDelta * m)) && ((y + yDelta * m) <= 7)) {\r\n                    let nextSquareIndex = 8 * (y + yDelta * m) + (x + xDelta * m);\r\n\r\n                    if (board[nextSquareIndex] === opponent) {\r\n                        squaresToChangeIndices.push(nextSquareIndex);\r\n                        m++;\r\n                        continue;\r\n                    }\r\n                    else if (board[nextSquareIndex] === turn) {\r\n                        board[8 * y + x] = turn;\r\n                        for (let index of squaresToChangeIndices) {\r\n                            board[index] = turn;\r\n                        }\r\n                        break;\r\n                    }\r\n                    else if (board[nextSquareIndex] === null) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction countScore(board, player) {\r\n    let total = 0;\r\n    for (let square of board) {\r\n        if (square === player) {\r\n            total += 1;\r\n        }\r\n    }\r\n    return total;\r\n}\r\n\r\n"],"sourceRoot":""}